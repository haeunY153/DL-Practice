텐서플로를 통한 자동차 연비 예측하기
참고 : 자동차 연비 예측하기: 회귀 | TensorFlow Core

import pandas as pd
import seaborn as sns
df = sns.load_dataset("mpg")
df.shape
df.isnull().sum()

# dropna로 결측치를 제거합니다. (결측치 제거한 것을 다시 데이터프레임에 넣기)
df= df.dropna()
df.shape

# select_dtypes 를 통해 object 타입을 제외하고 가져옵니다.
df= df.select_dtypes(exclude = "object")
df. shape

# describe 를 통해 기술 통계값을 확인합니다.
df.describe()

# 전체 데이터프레임에서 df, train, test를 분리합니다.
# train_dataset : 학습에 사용 (예: 기출문제)
# test_dataset : 실제 예측에 사용 (예 : 실전문제)
# 기출문제로 공부하고 실전 시험을 보는 과정과 유사합니다.

train_dataset= df.sample(frac = 0.8, random_state = 42)
train_dataset.shape

# train_dataset, test_dataset 에서 label(정답) 값을 꺼내 label 을 따로 생성합니다.
# 문제에서 정답을 분리하는 과정입니다.
# train_labels : train_dataset(예: 기출문제) 에서 정답을 꺼내서 분리합니다.
# test_labels : test_labels(예: 실전문제) 에서 정답을 꺼내서 분리합니다.

train_labels = train_dataset.pop("mpg")
train_labels.shape

test_labels = test_dataset.pop("mpg")
test_labels.shape

# tensorflow 를 불러옵니다. (2버전부터 keras API 사용)
import tensorflow as tf
tf.__version__

# input_shape= [len(train_dataset.keys())] ; len으로 키 값 가져올 수도 있고, 위에 나눈 것처럼 column 수를 입력해도 됨.
model = tf.keras.Sequential()
model.add(tf.keras.layers.Dense(64, activation="relu", input_shape=[len(train_dataset.keys())])) #입력층
model.add(tf.keras.layers.Dense(64, activation="relu")) # 히든 레이어1
model.add(tf.keras.layers.Dense(64, activation="relu")) # 히든 레이어2
model.add(tf.keras.layers.Dense(1)) #출력층

model.compile(loss = "mse", metrics = ["mae","mse"])
# mae: mean absolute error (오차의 절대평균), 0에 가까울 수록 정확함
# mse: mean squared error, 
# 정확도 측정하는 일반적인 방법 (회귀모델)

model.summary()

model.fit(train_dataset, train_labels, epochs=100, verbose= 0)
# epochs : 학습 횟수
# verbos : 0 (로그 미출력), 1 (로그 출력)

model.evaluate(test_dataset, test_labels)

predict_labels = model.predict(test_dataset).flatten()
predict_labels[:5]

sns.jointplot(x=test_labels, y=predict_labels, kind = "reg")

#모델 개선하기
# 학습할때 횟수 늘리기
# 모델 개선할 때 마다 성능 증가!! 예측하고자 하는 것으로 적용해보기
